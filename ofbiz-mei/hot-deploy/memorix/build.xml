<?xml version="1.0" encoding="UTF-8"?>

<project name="OFBiz - Memorix Component" default="jar" basedir=".">
    <import file="../../common.xml"/>

    <!-- ================================================================== -->
    <!-- Initialization of all property settings                            -->
    <!-- ================================================================== -->
	
    <property environment="env"/>
    <property name="desc" value="Memorix Component"/>
    <property name="name" value="memorix"/>
    <property name="component-name" value="memorix"/>
    <property name="ofbiz.home.dir" value="../.."/>
    <property name="src.dir" value="src"/>
    <property name="dtd.dir" value="dtd"/>
    <property name="lib.dir" value="lib"/>
    <property name="build.dir" value="build"/>
	
	
    <path id="local.class.path">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="../../framework/base/lib" includes="*.jar"/>
        <fileset dir="../../framework/base/lib/j2eespecs" includes="*.jar"/>
        <fileset dir="../../framework/base/build/lib" includes="*.jar"/>
        <fileset dir="../../framework/entity/lib" includes="*.jar"/>
        <fileset dir="../../framework/entity/build/lib" includes="*.jar"/>
        <fileset dir="../../framework/security/build/lib" includes="*.jar"/>
        <fileset dir="../../framework/service/lib" includes="*.jar"/>
        <fileset dir="../../framework/service/build/lib" includes="*.jar"/>
        <fileset dir="../../framework/minilang/build/lib" includes="*.jar"/>
        <fileset dir="../../framework/widget/build/lib" includes="*.jar"/>
        <fileset dir="../../framework/webapp/lib" includes="*.jar"/>
        <fileset dir="../../framework/webapp/build/lib" includes="*.jar"/>
    </path>

    <!-- ================================================================= -->
    <!-- Targets to create  patch files                                    -->
    <!-- ================================================================= -->

    <target name="create-ofbiz-patches" description="Creates patches for root, framework, application and specialpurpose components">
        <exec executable="svn" output="patches/root.patch" dir="${ofbiz.home.dir}">
            <arg value="diff"/>
            <arg value="--depth=files"/>
        </exec>
        <exec executable="svn" output="patches/framework.patch" dir="${ofbiz.home.dir}">
            <arg value="diff"/>
            <arg value="framework"/>
        </exec>
        <exec executable="svn" output="patches/applications.patch" dir="${ofbiz.home.dir}">
            <arg value="diff"/>
            <arg value="applications"/>
        </exec>
        <exec executable="svn" output="patches/specialpurpose.patch" dir="${ofbiz.home.dir}">
            <arg value="diff"/>
            <arg value="specialpurpose"/>
        </exec>
        <!-- this allow to work correctly on Windows machines without issues on Linux machines -->
        <fixcrlf srcdir="patches" includes="**/*.patch" eol="crlf" />
    </target>

    <target name="revert-ofbiz-patches" description="Remove any local change in the files or any previously applied local patch.">
        <exec executable="svn" dir="${ofbiz.home.dir}">
            <arg value="revert"/>
          <arg value="--depth=files"/>
            <arg value="${ofbiz.home.dir}"/>
        </exec>
        <exec executable="svn" dir="${ofbiz.home.dir}">
            <arg value="revert"/>
            <arg value="-R"/>
            <arg value="framework"/>
        </exec>
        <exec executable="svn" dir="${ofbiz.home.dir}">
            <arg value="revert"/>
            <arg value="-R"/>
            <arg value="applications"/>
        </exec>
        <exec executable="svn" dir="${ofbiz.home.dir}">
            <arg value="revert"/>
            <arg value="-R"/>
            <arg value="specialpurpose"/>
        </exec>
    </target>

    <target name="apply-ofbiz-patches" description="Apply the patches to root, framework, application and specialpurpose components.">
        <fail message="Patch files not found.">
            <condition>
                <or>
                    <not><isset property="component-name"/></not>
                    <not>
                        <resourcecount count="3" when="gt">
                            <fileset dir="patches" includes="*.patch"/>
                        </resourcecount>
                    </not>
                </or>
            </condition>
        </fail>
        <patch strip="0" patchfile="patches/root.patch" dir="${ofbiz.home.dir}" failonerror="true"/>
        <patch strip="0" patchfile="patches/framework.patch" dir="${ofbiz.home.dir}" failonerror="true"/>
        <patch strip="0" patchfile="patches/applications.patch" dir="${ofbiz.home.dir}" failonerror="true"/>
        <patch strip="0" patchfile="patches/specialpurpose.patch" dir="${ofbiz.home.dir}" failonerror="true"/>
        <delete>          
            <fileset dir="${ofbiz.home.dir}" includes="**/*.rej"/>
        </delete>
    </target>

    <target name="reapply-ofbiz-patches" description="First removes any previously applied patch and then applies the new patch">
        <fail message="Patch files not found.">
            <condition>
                <or>
                    <not><isset property="component-name"/></not>
                    <not>
                        <resourcecount count="3" when="gt">
                            <fileset dir="patches" includes="*.patch"/>
                        </resourcecount>
                    </not>
                </or>
            </condition>
        </fail>
        <antcall target="revert-ofbiz-patches"/>
        <antcall target="apply-ofbiz-patches"/>
    </target>
	
	<target name="jar" depends="classes">
	<main-jar/>
	<test-jar/>
	</target>
	
	<property name="cobertura.dir" value="${ofbiz.home.dir}/tools/cobertura" />
	<property name="instrumented.dir" value="${build.dir}/instrumented-classes" />
	<property name="report.xml.dir" value="${build.dir}/test-results" />
	<property name="coverage.xml.dir" value="${build.dir}/test-results" />
	
	
	<path id="cobertura.classpath">
		<!--fileset dir="${basedir}/tools/cobertura"-->
		<fileset dir="${cobertura.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	
	<target name="instrument" depends="classes" >
		<delete file="cobertura.ser" /> 
		<delete dir="${instrumented.dir}" />
		<cobertura-instrument todir="${instrumented.dir}">
			<!--fileset dir="${build.classes}"-->
			<fileset dir="${build.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test*.class" />
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="test-coverage" depends="instrument">
		<junit fork="yes" dir="${basedir}" haltonfailure="no" >
			<classpath location="${instrumented.dir}" />
			<classpath refid="cobertura.classpath" />
			<classpath location="${test.classes}" />
			<classpath>
				<fileset dir="${basedir}/lib">
					<include name="*.jar"/>
				</fileset>
			</classpath>
			<formatter type="xml" />
			<test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
			<batchtest todir="${report.xml.dir}" unless="testcase">
				<!--fileset dir="${testsource}"-->
				<fileset dir="${build.dir}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="coverage-report" depends="test-coverage">
		<cobertura-report	srcdir="${source}" 
							destdir="${coverage.xml.dir}" 
							format="xml" />
		</target>
	
	
	<target name="clean" description="remove buil/test files">
		<delete dir="${instrumented.dir}"/>
		<delete dir="${report.xml.dir}"/>
		<!--delete dir="${build.dir}"/-->
		<delete file="cobertura.log"/>
		<delete file="cobertura.ser"/>
	</target>
	
</project>
